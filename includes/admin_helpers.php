<?php
declare(strict_types=1);

/**
 * Fetch a request parameter from POST or GET with fallback.
 */
function admin_request_param(string $name, $default = null)
{
    if (isset($_POST[$name])) {
        return $_POST[$name];
    }

    if (isset($_GET[$name])) {
        return $_GET[$name];
    }

    return $default;
}

/**
 * Retrieve (and lazily generate) the CSRF token stored in session.
 */
function admin_get_csrf_token(): string
{
    if (session_status() !== PHP_SESSION_ACTIVE) {
        session_start();
    }

    if (empty($_SESSION['csrf_token']) || !is_string($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }

    return $_SESSION['csrf_token'];
}

/**
 * Validate a CSRF token value against the session token.
 */
function admin_validate_csrf(?string $token): bool
{
    $sessionToken = admin_get_csrf_token();
    return is_string($token) && hash_equals($sessionToken, $token);
}

/**
 * Append a log entry to a file within the shared logs directory.
 */
function admin_log_message(string $filename, string $message, string $status = 'INFO'): void
{
    $logDir = realpath(__DIR__ . '/../logs');
    if ($logDir === false) {
        $logDir = __DIR__ . '/../logs';
    }

    if (!is_dir($logDir)) {
        @mkdir($logDir, 0775, true);
    }

    $safeFilename = basename($filename);
    $logPath = $logDir . DIRECTORY_SEPARATOR . $safeFilename;

    $normalizedStatus = strtoupper(preg_replace('/[^A-Z0-9_\-]/i', '', $status));
    if ($normalizedStatus === '') {
        $normalizedStatus = 'INFO';
    }

    $timestamp = date('Y-m-d H:i:s');
    $line = sprintf('[%s][%s] %s%s', $timestamp, $normalizedStatus, $message, PHP_EOL);

    file_put_contents($logPath, $line, FILE_APPEND);
}

/**
 * Retrieve users from a fingerprint device using the shared configuration.
 * Returns an array of user tuples as provided by ZKLibrary or an empty array on failure.
 */
function admin_fetch_fingerprint_users(): array
{
    require_once __DIR__ . '/zklib/zklibrary.php';

    $configPath = __DIR__ . '/../includes/fingerprint_config.php';
    if (file_exists($configPath)) {
        require_once $configPath;
    }

    if (!defined('FINGERPRINT_IP') || !defined('FINGERPRINT_PORT')) {
        return [];
    }

    try {
        $zk = new ZKLibrary(FINGERPRINT_IP, FINGERPRINT_PORT);
        if ($zk->connect()) {
            $zk->disableDevice();
            $users = $zk->getUser();
            $zk->enableDevice();
            $zk->disconnect();
            return is_array($users) ? $users : [];
        }
    } catch (Exception $e) {
        admin_log_message('fingerprint_errors.log', 'Fingerprint fetch failed: ' . $e->getMessage(), 'ERROR');
    }

    return [];
}

/**
 * Build alert metadata based on request parameters and predefined status map.
 *
 * @param array $statusMap Associative array: status => ['message' => string, 'class' => string]
 * @param array $options Supported keys: status_param, message_param, default_class
 * @return array{status:string,message:string,class:string,should_display:bool}
 */
function admin_build_alert(array $statusMap, array $options = []): array
{
    $statusParam = $options['status_param'] ?? 'status';
    $messageParam = $options['message_param'] ?? 'msg';
    $defaultClass = $options['default_class'] ?? 'alert-info';

    $status = (string) admin_request_param($statusParam, '');
    $rawMessage = admin_request_param($messageParam, '');

    $configuredMessage = '';
    $alertClass = $defaultClass;

    if ($status !== '' && isset($statusMap[$status])) {
        $config = $statusMap[$status];
        $configuredMessage = isset($config['message']) ? (string) $config['message'] : '';
        if (!empty($config['class'])) {
            $alertClass = (string) $config['class'];
        }
    }

    $message = $rawMessage !== '' ? (string) $rawMessage : $configuredMessage;

    return [
        'status' => $status,
        'message' => $message,
        'class' => $alertClass,
        'should_display' => $message !== '',
    ];
}

/**
 * Render a Bootstrap alert component from alert metadata.
 *
 * @param array $alert Array generated by admin_build_alert()
 * @param array $options Supported keys: dismissible (bool), escape (bool), extra_class (string)
 */
function admin_render_alert(array $alert, array $options = []): string
{
    if (empty($alert['should_display'])) {
        return '';
    }

    $dismissible = $options['dismissible'] ?? true;
    $escape = $options['escape'] ?? true;
    $extraClass = $options['extra_class'] ?? '';

    $classes = trim(sprintf('%s %s', $alert['class'] ?? 'alert-info', $dismissible ? 'alert-dismissible fade show' : ''));
    if ($extraClass !== '') {
        $classes .= ' ' . trim((string) $extraClass);
    }

    $message = (string) ($alert['message'] ?? '');
    if ($escape) {
        $message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');
    }

    $button = '';
    if ($dismissible) {
        $button = '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>';
    }

    return sprintf('<div class="alert %s" role="alert">%s%s</div>', $classes, $message, $button);
}
